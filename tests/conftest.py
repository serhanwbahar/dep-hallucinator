"""
Simplified pytest configuration with essential fixtures only.
"""

import asyncio
import json
import tempfile
from pathlib import Path
from unittest.mock import AsyncMock

import pytest

from src.dep_hallucinator.dependency import Dependency
from src.dep_hallucinator.registry_clients import PackageInfo, RegistryCheckResult


@pytest.fixture
def event_loop():
    """Create an instance of the default event loop for the test session."""
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()


@pytest.fixture
def temp_dir():
    """Create a temporary directory for test files."""
    with tempfile.TemporaryDirectory() as tmpdir:
        yield Path(tmpdir)


@pytest.fixture
def sample_requirements_txt(temp_dir):
    """Create a sample requirements.txt file."""
    content = """requests==2.28.1
numpy>=1.21.0
suspicious-ai-package==1.0.0
flask>=2.0.0"""
    req_file = temp_dir / "requirements.txt"
    req_file.write_text(content)
    return req_file


@pytest.fixture
def sample_package_json(temp_dir):
    """Create a sample package.json file."""
    content = {
        "name": "test-project",
        "version": "1.0.0",
        "dependencies": {
            "express": "^4.18.0",
            "react": "^18.2.0",
            "ai-fake-helper": "1.0.0"
        }
    }
    pkg_file = temp_dir / "package.json"
    pkg_file.write_text(json.dumps(content, indent=2))
    return pkg_file


@pytest.fixture
def sample_poetry_lock(temp_dir):
    """Create a sample poetry.lock file."""
    content = """[[package]]
name = "requests"
version = "2.28.1"
description = "Python HTTP for Humans."

[[package]]
name = "suspicious-ai-lib"
version = "1.0.0"
description = "AI generated package"
"""
    poetry_file = temp_dir / "poetry.lock"
    poetry_file.write_text(content)
    return poetry_file


@pytest.fixture
def sample_pipfile_lock(temp_dir):
    """Create a sample Pipfile.lock file."""
    content = {
        "_meta": {
            "hash": {"sha256": "example_hash"},
            "pipfile-spec": 6,
            "requires": {"python_version": "3.9"}
        },
        "default": {
            "requests": {"hashes": [], "version": "==2.28.1"},
            "suspicious-pipenv-lib": {"hashes": [], "version": "==1.0.0"}
        },
        "develop": {
            "pytest": {"hashes": [], "version": "==7.0.0"}
        }
    }
    pipfile = temp_dir / "Pipfile.lock"
    pipfile.write_text(json.dumps(content, indent=2))
    return pipfile


@pytest.fixture
def sample_yarn_lock(temp_dir):
    """Create a sample yarn.lock file."""
    content = """# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1

express@^4.18.0:
  version "4.18.2"
  resolved "https://registry.yarnpkg.com/express/-/express-4.18.2.tgz"
  
react@^18.2.0:
  version "18.2.0"
  resolved "https://registry.yarnpkg.com/react/-/react-18.2.0.tgz"

suspicious-yarn-lib@1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/suspicious-yarn-lib/-/suspicious-yarn-lib-1.0.0.tgz"
"""
    yarn_file = temp_dir / "yarn.lock"
    yarn_file.write_text(content)
    return yarn_file


@pytest.fixture
def sample_pom_xml(temp_dir):
    """Create a sample pom.xml file."""
    content = """<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>test-project</artifactId>
    <version>1.0.0</version>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>5.3.21</version>
        </dependency>
        <dependency>
            <groupId>com.suspicious</groupId>
            <artifactId>ai-maven-helper</artifactId>
            <version>1.0.0</version>
        </dependency>
    </dependencies>
</project>"""
    pom_file = temp_dir / "pom.xml"
    pom_file.write_text(content)
    return pom_file


@pytest.fixture
def sample_build_gradle(temp_dir):
    """Create a sample build.gradle file."""
    content = """plugins {
    id 'java'
    id 'application'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework:spring-core:5.3.21'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'com.suspicious:ai-gradle-lib:1.0.0'
    testImplementation 'junit:junit:4.13.2'
}"""
    gradle_file = temp_dir / "build.gradle"
    gradle_file.write_text(content)
    return gradle_file


@pytest.fixture
def sample_cargo_toml(temp_dir):
    """Create a sample Cargo.toml file."""
    content = """[package]
name = "test-project"
version = "0.1.0"
edition = "2021"

[dependencies]
serde = "1.0"
tokio = "1.0"
suspicious-rust-crate = "0.1.0"

[dev-dependencies]
criterion = "0.4"
"""
    cargo_file = temp_dir / "Cargo.toml"
    cargo_file.write_text(content)
    return cargo_file


@pytest.fixture
def sample_cargo_lock(temp_dir):
    """Create a sample Cargo.lock file."""
    content = """# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 3

[[package]]
name = "serde"
version = "1.0.152"
source = "registry+https://github.com/rust-lang/crates.io-index"

[[package]]
name = "suspicious-rust-crate"
version = "0.1.0"
source = "registry+https://github.com/rust-lang/crates.io-index"

[[package]]
name = "tokio"
version = "1.25.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
"""
    cargo_lock_file = temp_dir / "Cargo.lock"
    cargo_lock_file.write_text(content)
    return cargo_lock_file


@pytest.fixture
def sample_go_mod(temp_dir):
    """Create a sample go.mod file."""
    content = """module github.com/example/test-project

go 1.19

require (
    github.com/gin-gonic/gin v1.9.1
    github.com/suspicious/ai-go-helper v1.0.0
    golang.org/x/crypto v0.5.0
)

require (
    github.com/bytedance/sonic v1.8.0 // indirect
)"""
    go_mod_file = temp_dir / "go.mod"
    go_mod_file.write_text(content)
    return go_mod_file


@pytest.fixture
def sample_go_sum(temp_dir):
    """Create a sample go.sum file."""
    content = """github.com/gin-gonic/gin v1.9.1 h1:4idEAncQnU5cB7BeOkPtxjfCSye0AAm1R0RVIqJ+Jmg=
github.com/gin-gonic/gin v1.9.1/go.mod h1:hPrL7YrpYKXt5YId3A/Tnip5kqbEAP+KLuI3SUcPTeU=
github.com/suspicious/ai-go-helper v1.0.0 h1:example_hash=
github.com/suspicious/ai-go-helper v1.0.0/go.mod h1:example_mod_hash=
golang.org/x/crypto v0.5.0 h1:U/0M97KRkSFvyD/3FSmdP5W5swImpNgle/EHFhOsQPE=
golang.org/x/crypto v0.5.0/go.mod h1:NK/OQwhpMQP3MwtdjgLlYHnH9ebylxKWv3e0fK+mkQU="""
    go_sum_file = temp_dir / "go.sum"
    go_sum_file.write_text(content)
    return go_sum_file


@pytest.fixture
def mock_registry_client():
    """Create a mock registry client for testing."""
    from src.dep_hallucinator.registry_clients import RegistryCheckResult, PackageInfo
    
    client = AsyncMock()
    
    # Mock responses for different package types
    async def mock_check_package(package_name):
        if "suspicious" in package_name or "fake" in package_name or "ai-" in package_name:
            # Non-existent suspicious packages - this should trigger CRITICAL
            return RegistryCheckResult(
                package_name=package_name,
                registry_type="pypi",
                package_info=PackageInfo(name=package_name, exists=False),
                check_duration_ms=100,
                error=None  # No error - just package doesn't exist
            )
        else:
            # Legitimate packages exist
            return RegistryCheckResult(
                package_name=package_name,
                registry_type="pypi", 
                package_info=PackageInfo(
                    name=package_name,
                    exists=True,
                    version="1.0.0",
                    download_count=10000,
                    author="Test Author"
                ),
                check_duration_ms=150,
                error=None
            )
    
    client.check_package_exists.side_effect = mock_check_package
    client.get_registry_type.return_value = "pypi"
    
    # Mock the async context manager
    async def mock_aenter(self):
        return client
    
    async def mock_aexit(self, *args):
        pass
    
    client.__aenter__ = mock_aenter
    client.__aexit__ = mock_aexit
    
    return client 